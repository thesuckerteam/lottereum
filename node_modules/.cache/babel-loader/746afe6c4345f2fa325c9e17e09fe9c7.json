{"ast":null,"code":"var _templateObject = _taggedTemplateLiteralLoose([\"\\n  fill: \", \";\\n  stroke-width: \", \";\\n  stroke: \", \";\\n\"], [\"\\n  fill: \", \";\\n  stroke-width: \", \";\\n  stroke: \", \";\\n\"]),\n    _templateObject2 = _taggedTemplateLiteralLoose([\"\\n  fill: transparent;\\n\"], [\"\\n  fill: transparent;\\n\"]);\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nvar Point = styled.circle(_templateObject, function (props) {\n  return props.color;\n}, function (props) {\n  return props.strokeWidth;\n}, function (props) {\n  return props.stroke;\n});\nPoint.displayName = \"Point\";\nvar Zone = styled.rect(_templateObject2);\nZone.displayName = \"Zone\";\n\nvar Points = function Points(_ref) {\n  var data = _ref.data,\n      getX = _ref.getX,\n      getY = _ref.getY,\n      maxY = _ref.maxY,\n      minX = _ref.minX,\n      minY = _ref.minY,\n      pointsColor = _ref.pointsColor,\n      pointsIsHoverOnZone = _ref.pointsIsHoverOnZone,\n      pointsOnHover = _ref.pointsOnHover,\n      pointsRadius = _ref.pointsRadius,\n      pointsStrokeColor = _ref.pointsStrokeColor,\n      pointsStrokeWidth = _ref.pointsStrokeWidth,\n      pointsVisible = _ref.pointsVisible;\n  return pointsVisible ? React.createElement(\"g\", null, data.map(function (point, i) {\n    return React.createElement(Point, {\n      key: i,\n      r: point.active ? pointsRadius * 1.2 : pointsRadius,\n      cx: getX(point.x),\n      cy: getY(point.y),\n      onMouseEnter: function onMouseEnter(e) {\n        return pointsOnHover(point, e);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return pointsOnHover(null, null);\n      },\n      color: pointsColor,\n      stroke: pointsStrokeColor,\n      strokeWidth: pointsStrokeWidth\n    });\n  }), pointsIsHoverOnZone && data.map(function (point, i) {\n    return React.createElement(Zone, {\n      key: i,\n      x: getX(point.x > minX ? (data[i].x + data[i - 1].x) / 2 : minX),\n      y: getY(maxY),\n      width: getX(1),\n      height: getY(minY),\n      onMouseEnter: function onMouseEnter(e) {\n        return pointsOnHover(point, e);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return pointsOnHover(null, null);\n      }\n    }, React.createElement(\"title\", null, \"x: \", point.x, \" y: \", point.y));\n  })) : null;\n};\n\nPoints.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number\n  })).isRequired,\n  getX: PropTypes.func,\n  getY: PropTypes.func,\n  maxX: PropTypes.number,\n  maxY: PropTypes.number,\n  minX: PropTypes.number,\n  minY: PropTypes.number,\n  pointsColor: PropTypes.string,\n  pointsIsHoverOnZone: PropTypes.bool,\n  pointsOnHover: PropTypes.func,\n  pointsRadius: PropTypes.number,\n  pointsStrokeColor: PropTypes.string,\n  pointsStrokeWidth: PropTypes.number,\n  pointsVisible: PropTypes.bool\n} : {};\nPoints.defaultProps = {\n  getX: function getX(x) {\n    return x;\n  },\n  getY: function getY(y) {\n    return y;\n  },\n  pointsColor: \"#fff\",\n  pointsIsHoverOnZone: false,\n  pointsOnHover: function pointsOnHover() {},\n  pointsRadius: 4,\n  pointsStrokeColor: \"#34495e\",\n  pointsStrokeWidth: 2,\n  pointsVisible: true\n};\nexport default Points;","map":null,"metadata":{},"sourceType":"module"}