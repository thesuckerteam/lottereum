{"ast":null,"code":"var _templateObject = _taggedTemplateLiteralLoose([\"\\n  fill: \", \";\\n\"], [\"\\n  fill: \", \";\\n\"]);\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nvar Label = styled.g(_templateObject, function (props) {\n  return props.color;\n});\n\nvar Labels = function Labels(_ref) {\n  var getX = _ref.getX,\n      getY = _ref.getY,\n      labelsColor = _ref.labelsColor,\n      labelsCountY = _ref.labelsCountY,\n      labelsFormatX = _ref.labelsFormatX,\n      labelsFormatY = _ref.labelsFormatY,\n      labelsHeightX = _ref.labelsHeightX,\n      labelsOffsetX = _ref.labelsOffsetX,\n      labelsOffsetY = _ref.labelsOffsetY,\n      labelsStepX = _ref.labelsStepX,\n      labelsVisible = _ref.labelsVisible,\n      maxX = _ref.maxX,\n      maxY = _ref.maxY,\n      minX = _ref.minX;\n\n  if (labelsVisible) {\n    var xLabels = void 0;\n    var yLabels = void 0;\n    var xLabelsRange = [];\n    var xStep = labelsStepX > 0 ? labelsStepX : 1;\n\n    for (var i = Math.floor(minX); i <= Math.ceil(maxX); i += xStep) {\n      xLabelsRange.push(i);\n    }\n\n    xLabels = xLabelsRange.map(function (x) {\n      return React.createElement(Label, {\n        key: x,\n        color: labelsColor\n      }, React.createElement(\"circle\", {\n        r: \"2\",\n        cx: getX(x),\n        cy: getY(0)\n      }), React.createElement(\"text\", {\n        x: getX(x),\n        y: getY(0) + labelsHeightX,\n        transform: \"translate(0, \" + labelsOffsetX + \")\",\n        textAnchor: \"middle\"\n      }, labelsFormatX(x)));\n    });\n    var yLabelsRange = [];\n    var yStep = labelsCountY > 0 ? labelsCountY : 1;\n\n    for (var _i = 0; _i <= maxY; _i += Math.floor(maxY / yStep)) {\n      yLabelsRange.push(_i);\n    }\n\n    yLabels = yLabelsRange.map(function (y) {\n      return React.createElement(Label, {\n        key: y,\n        color: labelsColor\n      }, React.createElement(\"circle\", {\n        r: \"2\",\n        cx: getX(minX),\n        cy: getY(y)\n      }), React.createElement(\"text\", {\n        x: getX(minX),\n        y: getY(y) + labelsHeightX / 2,\n        transform: \"translate(-\" + labelsOffsetY + \", 0)\",\n        textAnchor: \"end\"\n      }, labelsFormatY(y)));\n    });\n    return React.createElement(\"g\", null, xLabels && React.createElement(\"g\", null, xLabels), yLabels && React.createElement(\"g\", null, yLabels));\n  } else {\n    return null;\n  }\n};\n\nLabels.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  getX: PropTypes.func,\n  getY: PropTypes.func,\n  labelsColor: PropTypes.string,\n  labelsCountY: PropTypes.number,\n  labelsFormatX: PropTypes.func,\n  labelsFormatY: PropTypes.func,\n  labelsHeightX: PropTypes.number,\n  labelsOffsetX: PropTypes.number,\n  labelsOffsetY: PropTypes.number,\n  labelsStepX: PropTypes.number,\n  labelsVisible: PropTypes.bool,\n  maxX: PropTypes.number,\n  maxY: PropTypes.number,\n  minX: PropTypes.number,\n  minY: PropTypes.number\n} : {};\nLabels.defaultProps = {\n  getX: function getX(x) {\n    return x;\n  },\n  getY: function getY(y) {\n    return y;\n  },\n  labelsCharacterWidth: 10,\n  labelsColor: \"#bdc3c7\",\n  labelsCountY: 5,\n  labelsFormatX: function labelsFormatX(x) {\n    return x;\n  },\n  labelsFormatY: function labelsFormatY(y) {\n    return y;\n  },\n  labelsHeightX: 12,\n  labelsOffsetX: 15,\n  labelsOffsetY: 15,\n  labelsStepX: 2,\n  labelsVisible: true\n};\nexport default Labels;","map":null,"metadata":{},"sourceType":"module"}